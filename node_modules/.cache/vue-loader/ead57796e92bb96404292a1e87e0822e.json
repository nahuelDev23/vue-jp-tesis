{"remainingRequest":"C:\\xampp2\\htdocs\\tesisjp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\xampp2\\htdocs\\tesisjp\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp2\\htdocs\\tesisjp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp2\\htdocs\\tesisjp\\src\\views\\Panel.vue?vue&type=template&id=09cda38c&scoped=true&","dependencies":[{"path":"C:\\xampp2\\htdocs\\tesisjp\\src\\views\\Panel.vue","mtime":1604684731529},{"path":"C:\\xampp2\\htdocs\\tesisjp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604671285288},{"path":"C:\\xampp2\\htdocs\\tesisjp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1604671308048},{"path":"C:\\xampp2\\htdocs\\tesisjp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604671285288},{"path":"C:\\xampp2\\htdocs\\tesisjp\\node_modules\\vue-loader\\lib\\index.js","mtime":1604671308043}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAid3JhcHBlciIgfSwKICAgIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZ19iZyIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1nL2JnLnBuZyIpLCBhbHQ6ICIiIH0KICAgICAgfSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250ZW5lIiB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJ2dWUtcGFydGljbGVzIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInBhcnRpY2xlcyIsCiAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAiI2RlZGVkZSIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogImhlYWRlciIgfSwgWwogICAgICAgICAgICBfdm0uX20oMCksCiAgICAgICAgICAgIF9jKCJuYXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbl9uYXYiIH0sIFsKICAgICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAibWFpbl9tZW51IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1haW5fbWVudV9saXN0IiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1haW5fbWVudV9saW5rIiwgYXR0cnM6IHsgdG86ICIvIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTYWxpciIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBhbmVsIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwYW5lbF9oZWFkZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFuZWxfaGVhZGVyX29iamV0aXZvcyIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIk9iamV0aXZvcyIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFuZWxfaGVhZGVyX2FncmVnYXIiLAogICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ub3Blbk1vZGFsIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJzcGFuIiwgW192bS5fdigiQWdyZWdhciIpXSldCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl9tKDMpCiAgICAgIF0pLAogICAgICBfYygidHJhbnNpdGlvbiIsIHsgYXR0cnM6IHsgbmFtZTogImZhZGUiIH0gfSwgWwogICAgICAgIF92bS5zaG93CiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsX19kaWFsb2ciIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWxfX2hlYWRlciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaDEiLCBbX3ZtLl92KCJUZXJtaW5vcyB5IGNvbmRpY2lvbmVzIildKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtb2RhbF9fY2xvc2UiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsb3NlTW9kYWwoKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLXRpbWVzIiB9KV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsX19ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgU2UgcmVxdWVyaXJhIGxhIHByZXNlbnRhY2lvbiBkZWwgY29uc2VudGltaWVudG8gZXNjcml0byBkZWwgb2JqZXRpdm8gZGUgbGEgYnVzcXVlZGEgYWRqdW50YW5kbyBzdSBEb2N1bWVudG8gTmFjaW9uYWwgZGUgSWRlbnRpZGFkIHkgZG9jdW1lbnRhY2lvbiBxdWUgcHJ1ZWJlIHF1ZSBlc2EgcGVyc29uYSB0cmFiYWphIGVuIGxhIGNvbXBhw7FpYS4gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbF9fZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWxfX2Zvb3Rlcl90ZXJtcyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsgYXR0cnM6IHsgdHlwZTogImNoZWNrYm94IiB9IH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEFjZXB0byBsb3MgdGVybWlub3MgeSBjb25kaWNpb25lcyAiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbF9fZm9vdGVyX2FjZXB0YXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub3BlbkZvcm0oKQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkFjZXB0YXIiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpCiAgICAgIF0pLAogICAgICBfYygidHJhbnNpdGlvbiIsIHsgYXR0cnM6IHsgbmFtZTogImZhZGUiIH0gfSwgWwogICAgICAgIF92bS5zaG93Zm9ybQogICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbF9fZGlhbG9nIHNoYWRvdy1ib3giIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWxfX2hlYWRlciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaDEiLCBbX3ZtLl92KCJBZ3JlZ2FyIG51ZXZvIG9iamV0aXZvIildKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtb2RhbF9fY2xvc2UiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsb3NlRm9ybSgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtdGltZXMiIH0pXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWxfX2JvZHkiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWN0ZW5vcyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFjdGVub3NfY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250YWN0ZW5vc19mb3JtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBhY3Rpb246ICIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJuYW1lIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJOb21icmUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7IGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgaWQ6ICJuYW1lIiB9IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGFiZWwiLCB7IGF0dHJzOiB7IGZvcjogImFwZWxsaWRvIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBcGVsbGlkbyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBpZDogImFwZWxsaWRvIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJFbWFpbCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRW1haWwvcyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImVtYWlsIiwgaWQ6ICJFbWFpbCIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiZmlsZSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRqdW50YXIiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7IGF0dHJzOiB7IHR5cGU6ICJmaWxlIiwgaWQ6ICJmaWxlIiB9IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGFiZWwiLCB7IGF0dHJzOiB7IGZvcjogInRpcG8iIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlRpcG8gZGUgYnVzcXVlZGEiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImNoZWNrYm94IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiY2JveDEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJmaXJzdF9jaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkVzdGFuZGFyIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImNoZWNrYm94IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiY2JveDEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJmaXJzdF9jaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkRlZXAgLyBkYXJrd2ViIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbF9fZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWxfX2Zvb3Rlcl9hY2VwdGFyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsb3NlRm9ybSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiRW52aWFyIildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgOiBfdm0uX2UoKQogICAgICBdKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyX2xvZ28iIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImxvZ28iLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltZy9sb2dvLnBuZyIpLCBhbHQ6ICIiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJtYWluX21lbnVfbGlzdCIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltZy90ZWFtL2pwLmpwZyIpLCBhbHQ6ICIiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFuZWxfaGVhZGVyX2J1c2NhZG9yIiB9LCBbCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1zZWFyY2giIH0pLAogICAgICBfYygiaW5wdXQiLCB7IGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgcGxhY2Vob2xkZXI6ICJCdXNjYXIiIH0gfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ0YWJsZSIsIHsgc3RhdGljQ2xhc3M6ICJwYW5lbF90YWJsZSIgfSwgWwogICAgICBfYygidHIiLCBbCiAgICAgICAgX2MoInRoIiwgW192bS5fdigiTm9tYnJlIildKSwKICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJBcGVsbGlkbyIpXSksCiAgICAgICAgX2MoInRoIiwgW192bS5fdigiRmVjaGEgZGUgQ2FyZ2EiKV0pLAogICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlN0YXR1cyIpXSksCiAgICAgICAgX2MoInRoIiwgW192bS5fdigiRGVzY2FyZ2FyIildKQogICAgICBdKSwKICAgICAgX2MoInRyIiwgWwogICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkRpZWdvICIpXSksCiAgICAgICAgX2MoInRkIiwgW192bS5fdigiRXN0ZXZlIildKSwKICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIxNy8xMC8yMDIwIildKSwKICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmaW5hbGl6YWRvIiB9LCBbX3ZtLl92KCJGaW5hbGl6YWRvIildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiZGVzY2FyZ2FzL1RFU0lTLnBkZiIsIGRvd25sb2FkOiAiIiB9IH0sIFsKICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWNsb3VkLWRvd25sb2FkLWFsdCIgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJ0ciIsIFsKICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJHYXN0b24iKV0pLAogICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk11bGxlbiIpXSksCiAgICAgICAgX2MoInRkIiwgW192bS5fdigiMjAvMTAvMjAyMCIpXSksCiAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAicHJvY2VzbyIgfSwgW192bS5fdigiRW4gcHJvY2VzbyIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygidGQiLCBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWNsb3VkLWRvd25sb2FkLWFsdCIgfSldKQogICAgICBdKSwKICAgICAgX2MoInRyIiwgWwogICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkphdmllciIpXSksCiAgICAgICAgX2MoInRkIiwgW192bS5fdigiUGluYSIpXSksCiAgICAgICAgX2MoInRkIiwgW192bS5fdigiMTUvOS8yMDIwIildKSwKICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2ZXJpZmljYWNpb24iIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIgRW4gdmVyaWZpY2FjacOzbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJ0ZCIsIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtY2xvdWQtZG93bmxvYWQtYWx0IiB9KV0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}